Теоритические вопросы:
Вопрос 1
Какие модификаторы доступа есть в C#?

В C# существуют следующие модификаторы доступа:
public — доступен из любого места.
private — доступен только внутри своего класса.
protected — доступен внутри своего класса и производных классов.
internal — доступен в пределах того же сборщика.
protected internal — доступен в пределах того же сборщика и в производных классах.
private protected — доступен только в пределах того же сборщика и для производных классов внутри того же сборщика.

Вопрос 2
Вам надо определить в классе переменную, которая должна быть доступна из любого места в текущем проекте. Какой модификатор (или модификаторы, если их несколько) вы будете использовать?

Для этого нужно использовать модификатор доступа public.

Вопрос 3
В чем различие между модификаторами protected и private protected?

protected — доступ к члену класса возможен внутри класса и в производных классах, независимо от того, находятся ли они в том же сборщике.
private protected — доступ к члену класса возможен только внутри класса и в производных классах, если они находятся в том же сборщике.

Вопрос 4
Если классы и члены класса не имеют никаких модификаторов, какие модификаторы доступа к ним применяются по умолчанию?

По умолчанию, если модификатор доступа не указан:
Для класса — internal.
Для членов класса — private.

Вопрос 5
Что выведет на консоль следующая программа и почему?

class Person
{
    int age = 26;
    string name = "Tom";
 
    public Person(int age, string name)
    {
        this.age = age;
        this.name = name;
    }
}
class Program
{ 
    static void Main(string[] args)
    {
        Person person = new Person(19, "Bob");
        Console.WriteLine(person.name);
             
        Console.ReadKey();
    }
}

Программа не скомпилируется, потому что поле name в классе Person не имеет модификатора доступа, а по умолчанию в C# все члены класса без модификатора имеют модификатор private, то есть недоступны за пределами класса.

Свойства:

Вопрос 1
Что будет выведено на консоль в результате выполнения следующей программы?

class Person
{
    private int age = 15;
 
    public int Age
    {
        get { return age; }
        set { }
    }
}
class Program
{
    static void Main(string[] args)
    {
        Person tom = new Person();
        tom.Age = 25;
        Console.WriteLine(tom.Age);
 
        Console.ReadKey();
    }
}

Варианты ответов:
15

25

0

Программа выведет 15, потому что свойство Age имеет пустой сеттер, и его значение не изменяется.

Вопрос 2
Что будет выведено на консоль в результате выполнения следующей программы и почему?

class Person
{
    internal string Name { get; set; } = "Bob";
}
class Program
{
    static void Main(string[] args)
    {
        Person tom = new Person { Name = "Tom" };
        Console.WriteLine(tom.Name);
 
        Console.ReadKey();
    }
}

Программа выведет Tom, потому что свойство Name доступно для записи и чтения внутри того же сборщика.

Вопрос 3
Что будет выведено на консоль в результате выполнения следующей программы и почему?

class Person
{
    internal string Name { internal get; set; } = "Bob";
}
class Program
{
    static void Main(string[] args)
    {
        Person tom = new Person { Name = "Tom" };
        Console.WriteLine(tom.Name);
 
        Console.ReadKey();
    }
}

Программа не скомпилируется, потому что геттер для свойства Name имеет модификатор доступа internal, что запрещает его использование за пределами сборщика.


